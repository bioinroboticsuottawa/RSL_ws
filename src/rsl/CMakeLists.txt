cmake_minimum_required(VERSION 2.8.7)
project(rsl)

#Define that we are now using C++11 by default
add_definitions(-DGRT_CXX11_ENABLED)
set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=gnu++11")

## Find catkin macros and libraries
## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
## is used, also find other catkin packages
find_package(catkin REQUIRED COMPONENTS
  roscpp
  rospy
  tf
  sensor_msgs
  std_msgs
  message_generation
  geometry_msgs	
)

#find_package(grt REQUIRED)

## System dependencies are found with CMake's conventions
# find_package(Boost REQUIRED COMPONENTS system)


## Uncomment this if the package has a setup.py. This macro ensures
## modules and global scripts declared therein get installed
## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html
# catkin_python_setup()

################################################
## Declare ROS messages, services and actions ##
################################################

## To declare and build messages, services or actions from within this
## package, follow these steps:
## * Let MSG_DEP_SET be the set of packages whose message types you use in
##   your messages/services/actions (e.g. std_msgs, actionlib_msgs, ...).
## * In the file package.xml:
##   * add a build_depend tag for "message_generation"
##   * add a build_depend and a run_depend tag for each package in MSG_DEP_SET
##   * If MSG_DEP_SET isn't empty the following dependency has been pulled in
##     but can be declared for certainty nonetheless:
##     * add a run_depend tag for "message_runtime"
## * In this file (CMakeLists.txt):
##   * add "message_generation" and every package in MSG_DEP_SET to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * add "message_runtime" and every package in MSG_DEP_SET to
##     catkin_package(CATKIN_DEPENDS ...)
##   * uncomment the add_*_files sections below as needed
##     and list every .msg/.srv/.action file to be processed
##   * uncomment the generate_messages entry below
##   * add every package in MSG_DEP_SET to generate_messages(DEPENDENCIES ...)

## Generate messages in the 'msg' folder
add_message_files(
  FILES
  LeapFrame.msg
  LeapGesture.msg
  LeapHand.msg
  LeapPointable.msg
)

## Generate services in the 'srv' folder
add_service_files(
  FILES
  ResetCalibration.srv
)

## Generate actions in the 'action' folder
#add_action_files(
 # FILES
  #Hand.action
  #Ping.action
#)

## Generate added messages and services with any dependencies listed here
generate_messages(
   DEPENDENCIES
   sensor_msgs
   std_msgs
)

################################################
## Declare ROS dynamic reconfigure parameters ##
################################################

## To declare and build dynamic reconfigure parameters within this
## package, follow these steps:
## * In the file package.xml:
##   * add a build_depend and a run_depend tag for "dynamic_reconfigure"
## * In this file (CMakeLists.txt):
##   * add "dynamic_reconfigure" to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * uncomment the "generate_dynamic_reconfigure_options" section below
##     and list every .cfg file to be processed

## Generate dynamic reconfigure parameters in the 'cfg' folder
# generate_dynamic_reconfigure_options(
#   cfg/DynReconf1.cfg
#   cfg/DynReconf2.cfg
# )

###################################
## catkin specific configuration ##
###################################
## The catkin_package macro generates cmake config files for your package
## Declare things to be passed to dependent projects
## INCLUDE_DIRS: uncomment this if you package contains header files
## LIBRARIES: libraries you create in this project that dependent projects also need
## CATKIN_DEPENDS: catkin_packages dependent projects also need
## DEPENDS: system dependencies of this project that dependent projects also need
catkin_package(
#  INCLUDE_DIRS include
#  LIBRARIES leapmotion
#  CATKIN_DEPENDS roscpp rospy sensor_msgs std_msgs
#  DEPENDS system_lib
)

###########
## Build ##
###########

## Specify additional locations of header files
## Your package locations should be listed before other locations
# include_directories(include)
include_directories(
  	${catkin_INCLUDE_DIRS}
  	/home/dzhi/LeapSDK/include #Leap SDK location
	/home/dzhi/grt/GRT/ #GRT.h location (as shared library)
	/user/local/include/GRT/ #GRT.h location (as static library)
)

LINK_DIRECTORIES(
	/home/dzhi/LeapSDK/lib/x64/ #Link Leap SDK directory
	/home/dzhi/grt/build/tmp/ #Link GRT directory
	/user/local/lib/ #Link GRT directory libgrt.a
) 
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -g")
## Declare a C++ library
# add_library(leapmotion
#   src/${PROJECT_NAME}/leapmotion.cpp
# )

## Add cmake target dependencies of the library
## as an example, code may need to be generated before libraries
## either from message generation or dynamic reconfigure
# add_dependencies(leapmotion ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})

## Declare a C++ executable
add_executable(mysubscriber src/mysubscriber.cpp)
add_executable(reset_leapmotion_calibration_client src/reset_leapmotion_calibration_client.cpp)
add_executable(leapmotion_tf_broadcaster src/leapmotion_tf_broadcaster.cpp)
add_executable(leapmotion_tf_listener src/leapmotion_tf_listener.cpp)
add_executable(binary_motor_handNode src/binary_motor_handNode.cpp)
add_executable(LeapSDK_tfbroadcaster src/LeapSDK_tfbroadcaster.cpp)
add_executable(sample_listenner src/sample_listenner.cpp)
add_executable(wrist_node src/wrist_node.cpp)
add_executable(DTWExample src/DTWExample.cpp)
add_executable(SVMExample src/SVMExample.cpp)
#add_executable(LeapPublisher.py src/LeapSubscriber.py)
#add_executable(LeapSubscriber.py src/LeapSubscriber.py)

## Add cmake target dependencies of the executable
## same as for the library above
add_dependencies(mysubscriber ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})
add_dependencies(reset_leapmotion_calibration_client ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})
add_dependencies(leapmotion_tf_broadcaster ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})
add_dependencies(leapmotion_tf_listener ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})
add_dependencies(binary_motor_handNode ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})
add_dependencies(sample_listenner ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})
add_dependencies(LeapSDK_tfbroadcaster ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})
add_dependencies(wrist_node ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})
add_dependencies(DTWExample ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})
add_dependencies(SVMExample ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})
#add_dependencies(LeapPublisher.py ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})
#add_dependencies(LeapSubscriber.py ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})

## Specify libraries to link a library or executable target against
target_link_libraries(mysubscriber ${catkin_LIBRARIES})
target_link_libraries(reset_leapmotion_calibration_client ${catkin_LIBRARIES})
target_link_libraries(leapmotion_tf_broadcaster ${catkin_LIBRARIES})
target_link_libraries(leapmotion_tf_listener ${catkin_LIBRARIES})
target_link_libraries(binary_motor_handNode ${catkin_LIBRARIES})
target_link_libraries(LeapSDK_tfbroadcaster ${catkin_LIBRARIES} Leap)
target_link_libraries(sample_listenner ${catkin_LIBRARIES})
target_link_libraries(wrist_node ${catkin_LIBRARIES} Leap)
target_link_libraries(DTWExample ${catkin_LIBRARIES} grt Leap)
target_link_libraries(SVMExample ${catkin_LIBRARIES} grt Leap)
#target_link_libraries(LeapPublisher.py ${catkin_LIBRARIES})
#target_link_libraries(LeapSubscriber.py ${catkin_LIBRARIES})

#############
## Install ##
#############

# all install targets should use catkin DESTINATION variables
# See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html

## Mark executable scripts (Python etc.) for installation
## in contrast to setup.py, you can choose the destination
# install(PROGRAMS
#   scripts/my_python_script
#   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark executables and/or libraries for installation
# install(TARGETS leapmotion leapmotion_node
#   ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark cpp header files for installation
# install(DIRECTORY include/${PROJECT_NAME}/
#   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
#   FILES_MATCHING PATTERN "*.h"
#   PATTERN ".svn" EXCLUDE
# )

## Mark other files for installation (e.g. launch and bag files, etc.)
# install(FILES
#   # myfile1
#   # myfile2
#   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
# )

#############
## Testing ##
#############

## Add gtest based cpp test target and link libraries
# catkin_add_gtest(${PROJECT_NAME}-test test/test_leapmotion.cpp)
# if(TARGET ${PROJECT_NAME}-test)
#   target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})
# endif()

## Add folders to be run by python nosetests
# catkin_add_nosetests(test)
