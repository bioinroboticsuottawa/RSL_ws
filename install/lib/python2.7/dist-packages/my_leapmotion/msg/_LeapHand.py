# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from my_leapmotion/LeapHand.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class LeapHand(genpy.Message):
  _md5sum = "e1f168193e08481c556346f6b4c70f16"
  _type = "my_leapmotion/LeapHand"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Leap Motion v6 Hand JSON-based submessage
# https://developer.leapmotion.com/documentation/v2/javascript/supplements/Leap_JSON.html#version-6
#
#
geometry_msgs/Vector3[3] armBasis           # the 3 basis vectors of the arm (array of vectors)
float64 armWidth
float64 confidence
geometry_msgs/Vector3 direction             # array of floats (vector)
geometry_msgs/Point elbow
float64 grabStrength
uint32 ID
geometry_msgs/Vector3 palmNormal
geometry_msgs/Point palmPosition
geometry_msgs/Vector3 palmVelocity
float64 pinchStrength
geometry_msgs/Vector3[3] r                  # Leap Motion documentation as Matrix (ambigous)
float64 s
geometry_msgs/Point sphereCenter
float64 sphereRadius
geometry_msgs/Point stabilizedPalmPosition
geometry_msgs/Vector3 t
float64 timeVisible
string handType                                 # string - one of "right", "left"
geometry_msgs/Point wrist

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['armBasis','armWidth','confidence','direction','elbow','grabStrength','ID','palmNormal','palmPosition','palmVelocity','pinchStrength','r','s','sphereCenter','sphereRadius','stabilizedPalmPosition','t','timeVisible','handType','wrist']
  _slot_types = ['geometry_msgs/Vector3[3]','float64','float64','geometry_msgs/Vector3','geometry_msgs/Point','float64','uint32','geometry_msgs/Vector3','geometry_msgs/Point','geometry_msgs/Vector3','float64','geometry_msgs/Vector3[3]','float64','geometry_msgs/Point','float64','geometry_msgs/Point','geometry_msgs/Vector3','float64','string','geometry_msgs/Point']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       armBasis,armWidth,confidence,direction,elbow,grabStrength,ID,palmNormal,palmPosition,palmVelocity,pinchStrength,r,s,sphereCenter,sphereRadius,stabilizedPalmPosition,t,timeVisible,handType,wrist

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LeapHand, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.armBasis is None:
        self.armBasis = [geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3()]
      if self.armWidth is None:
        self.armWidth = 0.
      if self.confidence is None:
        self.confidence = 0.
      if self.direction is None:
        self.direction = geometry_msgs.msg.Vector3()
      if self.elbow is None:
        self.elbow = geometry_msgs.msg.Point()
      if self.grabStrength is None:
        self.grabStrength = 0.
      if self.ID is None:
        self.ID = 0
      if self.palmNormal is None:
        self.palmNormal = geometry_msgs.msg.Vector3()
      if self.palmPosition is None:
        self.palmPosition = geometry_msgs.msg.Point()
      if self.palmVelocity is None:
        self.palmVelocity = geometry_msgs.msg.Vector3()
      if self.pinchStrength is None:
        self.pinchStrength = 0.
      if self.r is None:
        self.r = [geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3()]
      if self.s is None:
        self.s = 0.
      if self.sphereCenter is None:
        self.sphereCenter = geometry_msgs.msg.Point()
      if self.sphereRadius is None:
        self.sphereRadius = 0.
      if self.stabilizedPalmPosition is None:
        self.stabilizedPalmPosition = geometry_msgs.msg.Point()
      if self.t is None:
        self.t = geometry_msgs.msg.Vector3()
      if self.timeVisible is None:
        self.timeVisible = 0.
      if self.handType is None:
        self.handType = ''
      if self.wrist is None:
        self.wrist = geometry_msgs.msg.Point()
    else:
      self.armBasis = [geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3()]
      self.armWidth = 0.
      self.confidence = 0.
      self.direction = geometry_msgs.msg.Vector3()
      self.elbow = geometry_msgs.msg.Point()
      self.grabStrength = 0.
      self.ID = 0
      self.palmNormal = geometry_msgs.msg.Vector3()
      self.palmPosition = geometry_msgs.msg.Point()
      self.palmVelocity = geometry_msgs.msg.Vector3()
      self.pinchStrength = 0.
      self.r = [geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3(),geometry_msgs.msg.Vector3()]
      self.s = 0.
      self.sphereCenter = geometry_msgs.msg.Point()
      self.sphereRadius = 0.
      self.stabilizedPalmPosition = geometry_msgs.msg.Point()
      self.t = geometry_msgs.msg.Vector3()
      self.timeVisible = 0.
      self.handType = ''
      self.wrist = geometry_msgs.msg.Point()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      for val1 in self.armBasis:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_struct_9dI10d.pack(_x.armWidth, _x.confidence, _x.direction.x, _x.direction.y, _x.direction.z, _x.elbow.x, _x.elbow.y, _x.elbow.z, _x.grabStrength, _x.ID, _x.palmNormal.x, _x.palmNormal.y, _x.palmNormal.z, _x.palmPosition.x, _x.palmPosition.y, _x.palmPosition.z, _x.palmVelocity.x, _x.palmVelocity.y, _x.palmVelocity.z, _x.pinchStrength))
      for val1 in self.r:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_struct_12d.pack(_x.s, _x.sphereCenter.x, _x.sphereCenter.y, _x.sphereCenter.z, _x.sphereRadius, _x.stabilizedPalmPosition.x, _x.stabilizedPalmPosition.y, _x.stabilizedPalmPosition.z, _x.t.x, _x.t.y, _x.t.z, _x.timeVisible))
      _x = self.handType
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3d.pack(_x.wrist.x, _x.wrist.y, _x.wrist.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.armBasis is None:
        self.armBasis = None
      if self.direction is None:
        self.direction = geometry_msgs.msg.Vector3()
      if self.elbow is None:
        self.elbow = geometry_msgs.msg.Point()
      if self.palmNormal is None:
        self.palmNormal = geometry_msgs.msg.Vector3()
      if self.palmPosition is None:
        self.palmPosition = geometry_msgs.msg.Point()
      if self.palmVelocity is None:
        self.palmVelocity = geometry_msgs.msg.Vector3()
      if self.r is None:
        self.r = None
      if self.sphereCenter is None:
        self.sphereCenter = geometry_msgs.msg.Point()
      if self.stabilizedPalmPosition is None:
        self.stabilizedPalmPosition = geometry_msgs.msg.Point()
      if self.t is None:
        self.t = geometry_msgs.msg.Vector3()
      if self.wrist is None:
        self.wrist = geometry_msgs.msg.Point()
      end = 0
      self.armBasis = []
      for i in range(0, 3):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.armBasis.append(val1)
      _x = self
      start = end
      end += 156
      (_x.armWidth, _x.confidence, _x.direction.x, _x.direction.y, _x.direction.z, _x.elbow.x, _x.elbow.y, _x.elbow.z, _x.grabStrength, _x.ID, _x.palmNormal.x, _x.palmNormal.y, _x.palmNormal.z, _x.palmPosition.x, _x.palmPosition.y, _x.palmPosition.z, _x.palmVelocity.x, _x.palmVelocity.y, _x.palmVelocity.z, _x.pinchStrength,) = _struct_9dI10d.unpack(str[start:end])
      self.r = []
      for i in range(0, 3):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.r.append(val1)
      _x = self
      start = end
      end += 96
      (_x.s, _x.sphereCenter.x, _x.sphereCenter.y, _x.sphereCenter.z, _x.sphereRadius, _x.stabilizedPalmPosition.x, _x.stabilizedPalmPosition.y, _x.stabilizedPalmPosition.z, _x.t.x, _x.t.y, _x.t.z, _x.timeVisible,) = _struct_12d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.handType = str[start:end].decode('utf-8')
      else:
        self.handType = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.wrist.x, _x.wrist.y, _x.wrist.z,) = _struct_3d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      for val1 in self.armBasis:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_struct_9dI10d.pack(_x.armWidth, _x.confidence, _x.direction.x, _x.direction.y, _x.direction.z, _x.elbow.x, _x.elbow.y, _x.elbow.z, _x.grabStrength, _x.ID, _x.palmNormal.x, _x.palmNormal.y, _x.palmNormal.z, _x.palmPosition.x, _x.palmPosition.y, _x.palmPosition.z, _x.palmVelocity.x, _x.palmVelocity.y, _x.palmVelocity.z, _x.pinchStrength))
      for val1 in self.r:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_struct_12d.pack(_x.s, _x.sphereCenter.x, _x.sphereCenter.y, _x.sphereCenter.z, _x.sphereRadius, _x.stabilizedPalmPosition.x, _x.stabilizedPalmPosition.y, _x.stabilizedPalmPosition.z, _x.t.x, _x.t.y, _x.t.z, _x.timeVisible))
      _x = self.handType
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3d.pack(_x.wrist.x, _x.wrist.y, _x.wrist.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.armBasis is None:
        self.armBasis = None
      if self.direction is None:
        self.direction = geometry_msgs.msg.Vector3()
      if self.elbow is None:
        self.elbow = geometry_msgs.msg.Point()
      if self.palmNormal is None:
        self.palmNormal = geometry_msgs.msg.Vector3()
      if self.palmPosition is None:
        self.palmPosition = geometry_msgs.msg.Point()
      if self.palmVelocity is None:
        self.palmVelocity = geometry_msgs.msg.Vector3()
      if self.r is None:
        self.r = None
      if self.sphereCenter is None:
        self.sphereCenter = geometry_msgs.msg.Point()
      if self.stabilizedPalmPosition is None:
        self.stabilizedPalmPosition = geometry_msgs.msg.Point()
      if self.t is None:
        self.t = geometry_msgs.msg.Vector3()
      if self.wrist is None:
        self.wrist = geometry_msgs.msg.Point()
      end = 0
      self.armBasis = []
      for i in range(0, 3):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.armBasis.append(val1)
      _x = self
      start = end
      end += 156
      (_x.armWidth, _x.confidence, _x.direction.x, _x.direction.y, _x.direction.z, _x.elbow.x, _x.elbow.y, _x.elbow.z, _x.grabStrength, _x.ID, _x.palmNormal.x, _x.palmNormal.y, _x.palmNormal.z, _x.palmPosition.x, _x.palmPosition.y, _x.palmPosition.z, _x.palmVelocity.x, _x.palmVelocity.y, _x.palmVelocity.z, _x.pinchStrength,) = _struct_9dI10d.unpack(str[start:end])
      self.r = []
      for i in range(0, 3):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.r.append(val1)
      _x = self
      start = end
      end += 96
      (_x.s, _x.sphereCenter.x, _x.sphereCenter.y, _x.sphereCenter.z, _x.sphereRadius, _x.stabilizedPalmPosition.x, _x.stabilizedPalmPosition.y, _x.stabilizedPalmPosition.z, _x.t.x, _x.t.y, _x.t.z, _x.timeVisible,) = _struct_12d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.handType = str[start:end].decode('utf-8')
      else:
        self.handType = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.wrist.x, _x.wrist.y, _x.wrist.z,) = _struct_3d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_9dI10d = struct.Struct("<9dI10d")
_struct_12d = struct.Struct("<12d")
_struct_3d = struct.Struct("<3d")
