// Generated by gencpp from file my_leapmotion/LeapGesture.msg
// DO NOT EDIT!


#ifndef MY_LEAPMOTION_MESSAGE_LEAPGESTURE_H
#define MY_LEAPMOTION_MESSAGE_LEAPGESTURE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace my_leapmotion
{
template <class ContainerAllocator>
struct LeapGesture_
{
  typedef LeapGesture_<ContainerAllocator> Type;

  LeapGesture_()
    : center()
    , direction()
    , duration(0)
    , handIds()
    , ID(0)
    , normal()
    , pointableIds()
    , position()
    , progress(0.0)
    , radius(0.0)
    , speed(0.0)
    , startPosition()
    , state()
    , gestureType()  {
    }
  LeapGesture_(const ContainerAllocator& _alloc)
    : center(_alloc)
    , direction(_alloc)
    , duration(0)
    , handIds(_alloc)
    , ID(0)
    , normal(_alloc)
    , pointableIds(_alloc)
    , position(_alloc)
    , progress(0.0)
    , radius(0.0)
    , speed(0.0)
    , startPosition(_alloc)
    , state(_alloc)
    , gestureType(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _center_type;
  _center_type center;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _direction_type;
  _direction_type direction;

   typedef uint32_t _duration_type;
  _duration_type duration;

   typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _handIds_type;
  _handIds_type handIds;

   typedef uint32_t _ID_type;
  _ID_type ID;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _normal_type;
  _normal_type normal;

   typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _pointableIds_type;
  _pointableIds_type pointableIds;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef double _progress_type;
  _progress_type progress;

   typedef double _radius_type;
  _radius_type radius;

   typedef double _speed_type;
  _speed_type speed;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _startPosition_type;
  _startPosition_type startPosition;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _state_type;
  _state_type state;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _gestureType_type;
  _gestureType_type gestureType;




  typedef boost::shared_ptr< ::my_leapmotion::LeapGesture_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_leapmotion::LeapGesture_<ContainerAllocator> const> ConstPtr;

}; // struct LeapGesture_

typedef ::my_leapmotion::LeapGesture_<std::allocator<void> > LeapGesture;

typedef boost::shared_ptr< ::my_leapmotion::LeapGesture > LeapGesturePtr;
typedef boost::shared_ptr< ::my_leapmotion::LeapGesture const> LeapGestureConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_leapmotion::LeapGesture_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_leapmotion::LeapGesture_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace my_leapmotion

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'my_leapmotion': ['/home/dzhi/catkin_ws/src/my_leapmotion/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::my_leapmotion::LeapGesture_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_leapmotion::LeapGesture_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_leapmotion::LeapGesture_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_leapmotion::LeapGesture_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_leapmotion::LeapGesture_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_leapmotion::LeapGesture_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_leapmotion::LeapGesture_<ContainerAllocator> >
{
  static const char* value()
  {
    return "967e671f82992095ab401d46b1c41311";
  }

  static const char* value(const ::my_leapmotion::LeapGesture_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x967e671f82992095ULL;
  static const uint64_t static_value2 = 0xab401d46b1c41311ULL;
};

template<class ContainerAllocator>
struct DataType< ::my_leapmotion::LeapGesture_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_leapmotion/LeapGesture";
  }

  static const char* value(const ::my_leapmotion::LeapGesture_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_leapmotion::LeapGesture_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Leap Motion v6 Gesture JSON-based submessage\n\
# https://developer.leapmotion.com/documentation/v2/javascript/supplements/Leap_JSON.html#version-6\n\
#\n\
#\n\
geometry_msgs/Point center          # array of floats (vector) -- circle only\n\
geometry_msgs/Vector3 direction     # array of floats (vector) -- swipe, keyTap, screenTap only\n\
uint32 duration                     # integer microseconds\n\
uint32[] handIds                    # array of integers\n\
uint32 ID                           # integer\n\
geometry_msgs/Vector3 normal        # array of floats -- circle only\n\
uint32[] pointableIds               # array\n\
geometry_msgs/Point position        # array of floats (vector) -- swipe, keyTap, screenTap only\n\
float64 progress                    # float -- circle, keyTap, screenTap only\n\
float64 radius                      # float -- circle only\n\
float64 speed                       # float -- swipe only\n\
geometry_msgs/Point startPosition   # array of float (vector) -- swipe only\n\
string state                        # string - one of \"start\", \"update\", \"stop\"\n\
string gestureType                  # string - one of \"circle\", \"swipe\", \"keyTap\", \"screenTap\"\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::my_leapmotion::LeapGesture_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_leapmotion::LeapGesture_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.center);
      stream.next(m.direction);
      stream.next(m.duration);
      stream.next(m.handIds);
      stream.next(m.ID);
      stream.next(m.normal);
      stream.next(m.pointableIds);
      stream.next(m.position);
      stream.next(m.progress);
      stream.next(m.radius);
      stream.next(m.speed);
      stream.next(m.startPosition);
      stream.next(m.state);
      stream.next(m.gestureType);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LeapGesture_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_leapmotion::LeapGesture_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_leapmotion::LeapGesture_<ContainerAllocator>& v)
  {
    s << indent << "center: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.center);
    s << indent << "direction: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.direction);
    s << indent << "duration: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.duration);
    s << indent << "handIds[]" << std::endl;
    for (size_t i = 0; i < v.handIds.size(); ++i)
    {
      s << indent << "  handIds[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.handIds[i]);
    }
    s << indent << "ID: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.ID);
    s << indent << "normal: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.normal);
    s << indent << "pointableIds[]" << std::endl;
    for (size_t i = 0; i < v.pointableIds.size(); ++i)
    {
      s << indent << "  pointableIds[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.pointableIds[i]);
    }
    s << indent << "position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "progress: ";
    Printer<double>::stream(s, indent + "  ", v.progress);
    s << indent << "radius: ";
    Printer<double>::stream(s, indent + "  ", v.radius);
    s << indent << "speed: ";
    Printer<double>::stream(s, indent + "  ", v.speed);
    s << indent << "startPosition: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.startPosition);
    s << indent << "state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.state);
    s << indent << "gestureType: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.gestureType);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_LEAPMOTION_MESSAGE_LEAPGESTURE_H
