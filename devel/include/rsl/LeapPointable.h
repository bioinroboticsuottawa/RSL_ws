// Generated by gencpp from file rsl/LeapPointable.msg
// DO NOT EDIT!


#ifndef RSL_MESSAGE_LEAPPOINTABLE_H
#define RSL_MESSAGE_LEAPPOINTABLE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Vector3.h>

namespace rsl
{
template <class ContainerAllocator>
struct LeapPointable_
{
  typedef LeapPointable_<ContainerAllocator> Type;

  LeapPointable_()
    : metacarpalBasis()
    , proximalBasis()
    , intermediateBasis()
    , distalBasis()
    , btipPosition()
    , carpPosition()
    , dipPosition()
    , direction()
    , extended(false)
    , handId(0)
    , ID(0)
    , length(0.0)
    , mcpPosition()
    , pipPosition()
    , stabilizedTipPosition()
    , timeVisible(0.0)
    , tipPosition()
    , tipVelocity()
    , tool(false)
    , touchDistance(0.0)
    , touchZone()
    , pointableType(0)
    , width(0.0)  {
    }
  LeapPointable_(const ContainerAllocator& _alloc)
    : metacarpalBasis()
    , proximalBasis()
    , intermediateBasis()
    , distalBasis()
    , btipPosition(_alloc)
    , carpPosition(_alloc)
    , dipPosition(_alloc)
    , direction(_alloc)
    , extended(false)
    , handId(0)
    , ID(0)
    , length(0.0)
    , mcpPosition(_alloc)
    , pipPosition(_alloc)
    , stabilizedTipPosition(_alloc)
    , timeVisible(0.0)
    , tipPosition(_alloc)
    , tipVelocity(_alloc)
    , tool(false)
    , touchDistance(0.0)
    , touchZone(_alloc)
    , pointableType(0)
    , width(0.0)  {
  (void)_alloc;
      metacarpalBasis.assign( ::geometry_msgs::Vector3_<ContainerAllocator> (_alloc));

      proximalBasis.assign( ::geometry_msgs::Vector3_<ContainerAllocator> (_alloc));

      intermediateBasis.assign( ::geometry_msgs::Vector3_<ContainerAllocator> (_alloc));

      distalBasis.assign( ::geometry_msgs::Vector3_<ContainerAllocator> (_alloc));
  }



   typedef boost::array< ::geometry_msgs::Vector3_<ContainerAllocator> , 3>  _metacarpalBasis_type;
  _metacarpalBasis_type metacarpalBasis;

   typedef boost::array< ::geometry_msgs::Vector3_<ContainerAllocator> , 3>  _proximalBasis_type;
  _proximalBasis_type proximalBasis;

   typedef boost::array< ::geometry_msgs::Vector3_<ContainerAllocator> , 3>  _intermediateBasis_type;
  _intermediateBasis_type intermediateBasis;

   typedef boost::array< ::geometry_msgs::Vector3_<ContainerAllocator> , 3>  _distalBasis_type;
  _distalBasis_type distalBasis;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _btipPosition_type;
  _btipPosition_type btipPosition;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _carpPosition_type;
  _carpPosition_type carpPosition;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _dipPosition_type;
  _dipPosition_type dipPosition;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _direction_type;
  _direction_type direction;

   typedef uint8_t _extended_type;
  _extended_type extended;

   typedef uint32_t _handId_type;
  _handId_type handId;

   typedef uint32_t _ID_type;
  _ID_type ID;

   typedef double _length_type;
  _length_type length;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _mcpPosition_type;
  _mcpPosition_type mcpPosition;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _pipPosition_type;
  _pipPosition_type pipPosition;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _stabilizedTipPosition_type;
  _stabilizedTipPosition_type stabilizedTipPosition;

   typedef double _timeVisible_type;
  _timeVisible_type timeVisible;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _tipPosition_type;
  _tipPosition_type tipPosition;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _tipVelocity_type;
  _tipVelocity_type tipVelocity;

   typedef uint8_t _tool_type;
  _tool_type tool;

   typedef double _touchDistance_type;
  _touchDistance_type touchDistance;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _touchZone_type;
  _touchZone_type touchZone;

   typedef uint32_t _pointableType_type;
  _pointableType_type pointableType;

   typedef double _width_type;
  _width_type width;




  typedef boost::shared_ptr< ::rsl::LeapPointable_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rsl::LeapPointable_<ContainerAllocator> const> ConstPtr;

}; // struct LeapPointable_

typedef ::rsl::LeapPointable_<std::allocator<void> > LeapPointable;

typedef boost::shared_ptr< ::rsl::LeapPointable > LeapPointablePtr;
typedef boost::shared_ptr< ::rsl::LeapPointable const> LeapPointableConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rsl::LeapPointable_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rsl::LeapPointable_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rsl

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'rsl': ['/home/dzhi/catkin_ws/src/rsl/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rsl::LeapPointable_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rsl::LeapPointable_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rsl::LeapPointable_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rsl::LeapPointable_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rsl::LeapPointable_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rsl::LeapPointable_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rsl::LeapPointable_<ContainerAllocator> >
{
  static const char* value()
  {
    return "17349b2abd8a7a1f31586b0c52c91cb7";
  }

  static const char* value(const ::rsl::LeapPointable_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x17349b2abd8a7a1fULL;
  static const uint64_t static_value2 = 0x31586b0c52c91cb7ULL;
};

template<class ContainerAllocator>
struct DataType< ::rsl::LeapPointable_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rsl/LeapPointable";
  }

  static const char* value(const ::rsl::LeapPointable_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rsl::LeapPointable_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Leap Motion v6 Pointable JSON-based submessage\n\
# https://developer.leapmotion.com/documentation/v2/javascript/supplements/Leap_JSON.html#version-6\n\
#\n\
#\n\
\n\
# Leap uses a two dimensional array for the bases but ROS messages only support one dimension\n\
# Unroll the Leap bases into individual bone basis instead\n\
# geometry_msgs/Vector3[3][] bases          # the 3 basis vectors for each bone, in index order, wrist to tip, metacarpal, proximal, intermediate, and distal.\n\
geometry_msgs/Vector3[3] metacarpalBasis\n\
geometry_msgs/Vector3[3] proximalBasis\n\
geometry_msgs/Vector3[3] intermediateBasis\n\
geometry_msgs/Vector3[3] distalBasis\n\
geometry_msgs/Point btipPosition            # the position of the tip of the distal phalanx as an array of 3 floats.\n\
geometry_msgs/Point carpPosition            # the position of the base of metacarpal bone as an array of 3 floats.\n\
geometry_msgs/Point dipPosition             # the position of the base of the distal phalanx as an array of 3 floats.\n\
geometry_msgs/Vector3 direction\n\
bool extended\n\
uint32 handId\n\
uint32 ID\n\
float64 length\n\
geometry_msgs/Point mcpPosition             # a position vector as an array of 3 floating point numbers\n\
geometry_msgs/Point pipPosition             # a position vector as an array of 3 floating point numbers\n\
geometry_msgs/Point stabilizedTipPosition   # array of floats (vector)\n\
float64 timeVisible\n\
geometry_msgs/Point tipPosition             #  array of floats (vector)\n\
geometry_msgs/Vector3 tipVelocity           #  array of floats (vector)\n\
bool tool\n\
float64 touchDistance\n\
string touchZone                            # string - one of \"none\", \"hovering\", \"touching\"\n\
uint32 pointableType                        # integer - 0 is thumb; 4 is pinky\n\
float64 width\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::rsl::LeapPointable_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rsl::LeapPointable_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.metacarpalBasis);
      stream.next(m.proximalBasis);
      stream.next(m.intermediateBasis);
      stream.next(m.distalBasis);
      stream.next(m.btipPosition);
      stream.next(m.carpPosition);
      stream.next(m.dipPosition);
      stream.next(m.direction);
      stream.next(m.extended);
      stream.next(m.handId);
      stream.next(m.ID);
      stream.next(m.length);
      stream.next(m.mcpPosition);
      stream.next(m.pipPosition);
      stream.next(m.stabilizedTipPosition);
      stream.next(m.timeVisible);
      stream.next(m.tipPosition);
      stream.next(m.tipVelocity);
      stream.next(m.tool);
      stream.next(m.touchDistance);
      stream.next(m.touchZone);
      stream.next(m.pointableType);
      stream.next(m.width);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LeapPointable_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rsl::LeapPointable_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rsl::LeapPointable_<ContainerAllocator>& v)
  {
    s << indent << "metacarpalBasis[]" << std::endl;
    for (size_t i = 0; i < v.metacarpalBasis.size(); ++i)
    {
      s << indent << "  metacarpalBasis[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "    ", v.metacarpalBasis[i]);
    }
    s << indent << "proximalBasis[]" << std::endl;
    for (size_t i = 0; i < v.proximalBasis.size(); ++i)
    {
      s << indent << "  proximalBasis[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "    ", v.proximalBasis[i]);
    }
    s << indent << "intermediateBasis[]" << std::endl;
    for (size_t i = 0; i < v.intermediateBasis.size(); ++i)
    {
      s << indent << "  intermediateBasis[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "    ", v.intermediateBasis[i]);
    }
    s << indent << "distalBasis[]" << std::endl;
    for (size_t i = 0; i < v.distalBasis.size(); ++i)
    {
      s << indent << "  distalBasis[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "    ", v.distalBasis[i]);
    }
    s << indent << "btipPosition: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.btipPosition);
    s << indent << "carpPosition: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.carpPosition);
    s << indent << "dipPosition: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.dipPosition);
    s << indent << "direction: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.direction);
    s << indent << "extended: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.extended);
    s << indent << "handId: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.handId);
    s << indent << "ID: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.ID);
    s << indent << "length: ";
    Printer<double>::stream(s, indent + "  ", v.length);
    s << indent << "mcpPosition: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.mcpPosition);
    s << indent << "pipPosition: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.pipPosition);
    s << indent << "stabilizedTipPosition: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.stabilizedTipPosition);
    s << indent << "timeVisible: ";
    Printer<double>::stream(s, indent + "  ", v.timeVisible);
    s << indent << "tipPosition: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.tipPosition);
    s << indent << "tipVelocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.tipVelocity);
    s << indent << "tool: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tool);
    s << indent << "touchDistance: ";
    Printer<double>::stream(s, indent + "  ", v.touchDistance);
    s << indent << "touchZone: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.touchZone);
    s << indent << "pointableType: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.pointableType);
    s << indent << "width: ";
    Printer<double>::stream(s, indent + "  ", v.width);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RSL_MESSAGE_LEAPPOINTABLE_H
