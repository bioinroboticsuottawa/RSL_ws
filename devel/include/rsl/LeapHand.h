// Generated by gencpp from file rsl/LeapHand.msg
// DO NOT EDIT!


#ifndef RSL_MESSAGE_LEAPHAND_H
#define RSL_MESSAGE_LEAPHAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Point.h>

namespace rsl
{
template <class ContainerAllocator>
struct LeapHand_
{
  typedef LeapHand_<ContainerAllocator> Type;

  LeapHand_()
    : armBasis()
    , armWidth(0.0)
    , confidence(0.0)
    , direction()
    , elbow()
    , grabStrength(0.0)
    , ID(0)
    , palmNormal()
    , palmPosition()
    , palmVelocity()
    , pinchStrength(0.0)
    , r()
    , s(0.0)
    , sphereCenter()
    , sphereRadius(0.0)
    , stabilizedPalmPosition()
    , t()
    , timeVisible(0.0)
    , handType()
    , wrist()  {
    }
  LeapHand_(const ContainerAllocator& _alloc)
    : armBasis()
    , armWidth(0.0)
    , confidence(0.0)
    , direction(_alloc)
    , elbow(_alloc)
    , grabStrength(0.0)
    , ID(0)
    , palmNormal(_alloc)
    , palmPosition(_alloc)
    , palmVelocity(_alloc)
    , pinchStrength(0.0)
    , r()
    , s(0.0)
    , sphereCenter(_alloc)
    , sphereRadius(0.0)
    , stabilizedPalmPosition(_alloc)
    , t(_alloc)
    , timeVisible(0.0)
    , handType(_alloc)
    , wrist(_alloc)  {
  (void)_alloc;
      armBasis.assign( ::geometry_msgs::Vector3_<ContainerAllocator> (_alloc));

      r.assign( ::geometry_msgs::Vector3_<ContainerAllocator> (_alloc));
  }



   typedef boost::array< ::geometry_msgs::Vector3_<ContainerAllocator> , 3>  _armBasis_type;
  _armBasis_type armBasis;

   typedef double _armWidth_type;
  _armWidth_type armWidth;

   typedef double _confidence_type;
  _confidence_type confidence;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _direction_type;
  _direction_type direction;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _elbow_type;
  _elbow_type elbow;

   typedef double _grabStrength_type;
  _grabStrength_type grabStrength;

   typedef uint32_t _ID_type;
  _ID_type ID;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _palmNormal_type;
  _palmNormal_type palmNormal;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _palmPosition_type;
  _palmPosition_type palmPosition;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _palmVelocity_type;
  _palmVelocity_type palmVelocity;

   typedef double _pinchStrength_type;
  _pinchStrength_type pinchStrength;

   typedef boost::array< ::geometry_msgs::Vector3_<ContainerAllocator> , 3>  _r_type;
  _r_type r;

   typedef double _s_type;
  _s_type s;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _sphereCenter_type;
  _sphereCenter_type sphereCenter;

   typedef double _sphereRadius_type;
  _sphereRadius_type sphereRadius;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _stabilizedPalmPosition_type;
  _stabilizedPalmPosition_type stabilizedPalmPosition;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _t_type;
  _t_type t;

   typedef double _timeVisible_type;
  _timeVisible_type timeVisible;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _handType_type;
  _handType_type handType;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _wrist_type;
  _wrist_type wrist;




  typedef boost::shared_ptr< ::rsl::LeapHand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rsl::LeapHand_<ContainerAllocator> const> ConstPtr;

}; // struct LeapHand_

typedef ::rsl::LeapHand_<std::allocator<void> > LeapHand;

typedef boost::shared_ptr< ::rsl::LeapHand > LeapHandPtr;
typedef boost::shared_ptr< ::rsl::LeapHand const> LeapHandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rsl::LeapHand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rsl::LeapHand_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rsl

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'rsl': ['/home/dzhi/catkin_ws/src/rsl/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rsl::LeapHand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rsl::LeapHand_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rsl::LeapHand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rsl::LeapHand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rsl::LeapHand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rsl::LeapHand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rsl::LeapHand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e1f168193e08481c556346f6b4c70f16";
  }

  static const char* value(const ::rsl::LeapHand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe1f168193e08481cULL;
  static const uint64_t static_value2 = 0x556346f6b4c70f16ULL;
};

template<class ContainerAllocator>
struct DataType< ::rsl::LeapHand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rsl/LeapHand";
  }

  static const char* value(const ::rsl::LeapHand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rsl::LeapHand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Leap Motion v6 Hand JSON-based submessage\n\
# https://developer.leapmotion.com/documentation/v2/javascript/supplements/Leap_JSON.html#version-6\n\
#\n\
#\n\
geometry_msgs/Vector3[3] armBasis           # the 3 basis vectors of the arm (array of vectors)\n\
float64 armWidth\n\
float64 confidence\n\
geometry_msgs/Vector3 direction             # array of floats (vector)\n\
geometry_msgs/Point elbow\n\
float64 grabStrength\n\
uint32 ID\n\
geometry_msgs/Vector3 palmNormal\n\
geometry_msgs/Point palmPosition\n\
geometry_msgs/Vector3 palmVelocity\n\
float64 pinchStrength\n\
geometry_msgs/Vector3[3] r                  # Leap Motion documentation as Matrix (ambigous)\n\
float64 s\n\
geometry_msgs/Point sphereCenter\n\
float64 sphereRadius\n\
geometry_msgs/Point stabilizedPalmPosition\n\
geometry_msgs/Vector3 t\n\
float64 timeVisible\n\
string handType                                 # string - one of \"right\", \"left\"\n\
geometry_msgs/Point wrist\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::rsl::LeapHand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rsl::LeapHand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.armBasis);
      stream.next(m.armWidth);
      stream.next(m.confidence);
      stream.next(m.direction);
      stream.next(m.elbow);
      stream.next(m.grabStrength);
      stream.next(m.ID);
      stream.next(m.palmNormal);
      stream.next(m.palmPosition);
      stream.next(m.palmVelocity);
      stream.next(m.pinchStrength);
      stream.next(m.r);
      stream.next(m.s);
      stream.next(m.sphereCenter);
      stream.next(m.sphereRadius);
      stream.next(m.stabilizedPalmPosition);
      stream.next(m.t);
      stream.next(m.timeVisible);
      stream.next(m.handType);
      stream.next(m.wrist);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LeapHand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rsl::LeapHand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rsl::LeapHand_<ContainerAllocator>& v)
  {
    s << indent << "armBasis[]" << std::endl;
    for (size_t i = 0; i < v.armBasis.size(); ++i)
    {
      s << indent << "  armBasis[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "    ", v.armBasis[i]);
    }
    s << indent << "armWidth: ";
    Printer<double>::stream(s, indent + "  ", v.armWidth);
    s << indent << "confidence: ";
    Printer<double>::stream(s, indent + "  ", v.confidence);
    s << indent << "direction: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.direction);
    s << indent << "elbow: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.elbow);
    s << indent << "grabStrength: ";
    Printer<double>::stream(s, indent + "  ", v.grabStrength);
    s << indent << "ID: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.ID);
    s << indent << "palmNormal: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.palmNormal);
    s << indent << "palmPosition: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.palmPosition);
    s << indent << "palmVelocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.palmVelocity);
    s << indent << "pinchStrength: ";
    Printer<double>::stream(s, indent + "  ", v.pinchStrength);
    s << indent << "r[]" << std::endl;
    for (size_t i = 0; i < v.r.size(); ++i)
    {
      s << indent << "  r[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "    ", v.r[i]);
    }
    s << indent << "s: ";
    Printer<double>::stream(s, indent + "  ", v.s);
    s << indent << "sphereCenter: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.sphereCenter);
    s << indent << "sphereRadius: ";
    Printer<double>::stream(s, indent + "  ", v.sphereRadius);
    s << indent << "stabilizedPalmPosition: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.stabilizedPalmPosition);
    s << indent << "t: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.t);
    s << indent << "timeVisible: ";
    Printer<double>::stream(s, indent + "  ", v.timeVisible);
    s << indent << "handType: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.handType);
    s << indent << "wrist: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.wrist);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RSL_MESSAGE_LEAPHAND_H
