// Generated by gencpp from file rsl/LeapFrame.msg
// DO NOT EDIT!


#ifndef RSL_MESSAGE_LEAPFRAME_H
#define RSL_MESSAGE_LEAPFRAME_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <rsl/LeapGesture.h>
#include <rsl/LeapHand.h>
#include <rsl/LeapPointable.h>

namespace rsl
{
template <class ContainerAllocator>
struct LeapFrame_
{
  typedef LeapFrame_<ContainerAllocator> Type;

  LeapFrame_()
    : header()
    , currentFrameRate(0.0)
    , ID(0)
    , r()
    , s(0.0)
    , t()
    , timestamp()
    , gestures()
    , hands()
    , pointables()  {
    }
  LeapFrame_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , currentFrameRate(0.0)
    , ID(0)
    , r(_alloc)
    , s(0.0)
    , t(_alloc)
    , timestamp()
    , gestures(_alloc)
    , hands(_alloc)
    , pointables(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _currentFrameRate_type;
  _currentFrameRate_type currentFrameRate;

   typedef uint32_t _ID_type;
  _ID_type ID;

   typedef std::vector< ::geometry_msgs::Vector3_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Vector3_<ContainerAllocator> >::other >  _r_type;
  _r_type r;

   typedef double _s_type;
  _s_type s;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _t_type;
  _t_type t;

   typedef ros::Time _timestamp_type;
  _timestamp_type timestamp;

   typedef std::vector< ::rsl::LeapGesture_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rsl::LeapGesture_<ContainerAllocator> >::other >  _gestures_type;
  _gestures_type gestures;

   typedef std::vector< ::rsl::LeapHand_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rsl::LeapHand_<ContainerAllocator> >::other >  _hands_type;
  _hands_type hands;

   typedef std::vector< ::rsl::LeapPointable_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rsl::LeapPointable_<ContainerAllocator> >::other >  _pointables_type;
  _pointables_type pointables;




  typedef boost::shared_ptr< ::rsl::LeapFrame_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rsl::LeapFrame_<ContainerAllocator> const> ConstPtr;

}; // struct LeapFrame_

typedef ::rsl::LeapFrame_<std::allocator<void> > LeapFrame;

typedef boost::shared_ptr< ::rsl::LeapFrame > LeapFramePtr;
typedef boost::shared_ptr< ::rsl::LeapFrame const> LeapFrameConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rsl::LeapFrame_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rsl::LeapFrame_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rsl

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'rsl': ['/home/dzhi/catkin_ws/src/rsl/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rsl::LeapFrame_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rsl::LeapFrame_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rsl::LeapFrame_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rsl::LeapFrame_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rsl::LeapFrame_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rsl::LeapFrame_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rsl::LeapFrame_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1be96930b5a5f7da0ae5f4ae85fd4442";
  }

  static const char* value(const ::rsl::LeapFrame_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1be96930b5a5f7daULL;
  static const uint64_t static_value2 = 0x0ae5f4ae85fd4442ULL;
};

template<class ContainerAllocator>
struct DataType< ::rsl::LeapFrame_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rsl/LeapFrame";
  }

  static const char* value(const ::rsl::LeapFrame_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rsl::LeapFrame_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Leap Motion v6 Frame JSON-based message\n\
# https://developer.leapmotion.com/documentation/v2/javascript/supplements/Leap_JSON.html#version-6\n\
#\n\
#\n\
Header header\n\
float64 currentFrameRate\n\
uint32 ID                       # Leap Motion documents this as a float, but that's not right\n\
geometry_msgs/Vector3[] r      # Leap Motion documentation as Matrix (ambigous)\n\
float64 s\n\
geometry_msgs/Vector3 t\n\
time timestamp\n\
LeapGesture[] gestures\n\
LeapHand[] hands\n\
# interaction box not included\n\
LeapPointable[] pointables\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: rsl/LeapGesture\n\
# Leap Motion v6 Gesture JSON-based submessage\n\
# https://developer.leapmotion.com/documentation/v2/javascript/supplements/Leap_JSON.html#version-6\n\
#\n\
#\n\
geometry_msgs/Point center          # array of floats (vector) -- circle only\n\
geometry_msgs/Vector3 direction     # array of floats (vector) -- swipe, keyTap, screenTap only\n\
uint32 duration                     # integer microseconds\n\
uint32[] handIds                    # array of integers\n\
uint32 ID                           # integer\n\
geometry_msgs/Vector3 normal        # array of floats -- circle only\n\
uint32[] pointableIds               # array\n\
geometry_msgs/Point position        # array of floats (vector) -- swipe, keyTap, screenTap only\n\
float64 progress                    # float -- circle, keyTap, screenTap only\n\
float64 radius                      # float -- circle only\n\
float64 speed                       # float -- swipe only\n\
geometry_msgs/Point startPosition   # array of float (vector) -- swipe only\n\
string state                        # string - one of \"start\", \"update\", \"stop\"\n\
string gestureType                  # string - one of \"circle\", \"swipe\", \"keyTap\", \"screenTap\"\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: rsl/LeapHand\n\
# Leap Motion v6 Hand JSON-based submessage\n\
# https://developer.leapmotion.com/documentation/v2/javascript/supplements/Leap_JSON.html#version-6\n\
#\n\
#\n\
geometry_msgs/Vector3[3] armBasis           # the 3 basis vectors of the arm (array of vectors)\n\
float64 armWidth\n\
float64 confidence\n\
geometry_msgs/Vector3 direction             # array of floats (vector)\n\
geometry_msgs/Point elbow\n\
float64 grabStrength\n\
uint32 ID\n\
geometry_msgs/Vector3 palmNormal\n\
geometry_msgs/Point palmPosition\n\
geometry_msgs/Vector3 palmVelocity\n\
float64 pinchStrength\n\
geometry_msgs/Vector3[3] r                  # Leap Motion documentation as Matrix (ambigous)\n\
float64 s\n\
geometry_msgs/Point sphereCenter\n\
float64 sphereRadius\n\
geometry_msgs/Point stabilizedPalmPosition\n\
geometry_msgs/Vector3 t\n\
float64 timeVisible\n\
string handType                                 # string - one of \"right\", \"left\"\n\
geometry_msgs/Point wrist\n\
\n\
================================================================================\n\
MSG: rsl/LeapPointable\n\
# Leap Motion v6 Pointable JSON-based submessage\n\
# https://developer.leapmotion.com/documentation/v2/javascript/supplements/Leap_JSON.html#version-6\n\
#\n\
#\n\
\n\
# Leap uses a two dimensional array for the bases but ROS messages only support one dimension\n\
# Unroll the Leap bases into individual bone basis instead\n\
# geometry_msgs/Vector3[3][] bases          # the 3 basis vectors for each bone, in index order, wrist to tip, metacarpal, proximal, intermediate, and distal.\n\
geometry_msgs/Vector3[3] metacarpalBasis\n\
geometry_msgs/Vector3[3] proximalBasis\n\
geometry_msgs/Vector3[3] intermediateBasis\n\
geometry_msgs/Vector3[3] distalBasis\n\
geometry_msgs/Point btipPosition            # the position of the tip of the distal phalanx as an array of 3 floats.\n\
geometry_msgs/Point carpPosition            # the position of the base of metacarpal bone as an array of 3 floats.\n\
geometry_msgs/Point dipPosition             # the position of the base of the distal phalanx as an array of 3 floats.\n\
geometry_msgs/Vector3 direction\n\
bool extended\n\
uint32 handId\n\
uint32 ID\n\
float64 length\n\
geometry_msgs/Point mcpPosition             # a position vector as an array of 3 floating point numbers\n\
geometry_msgs/Point pipPosition             # a position vector as an array of 3 floating point numbers\n\
geometry_msgs/Point stabilizedTipPosition   # array of floats (vector)\n\
float64 timeVisible\n\
geometry_msgs/Point tipPosition             #  array of floats (vector)\n\
geometry_msgs/Vector3 tipVelocity           #  array of floats (vector)\n\
bool tool\n\
float64 touchDistance\n\
string touchZone                            # string - one of \"none\", \"hovering\", \"touching\"\n\
uint32 pointableType                        # integer - 0 is thumb; 4 is pinky\n\
float64 width\n\
";
  }

  static const char* value(const ::rsl::LeapFrame_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rsl::LeapFrame_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.currentFrameRate);
      stream.next(m.ID);
      stream.next(m.r);
      stream.next(m.s);
      stream.next(m.t);
      stream.next(m.timestamp);
      stream.next(m.gestures);
      stream.next(m.hands);
      stream.next(m.pointables);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LeapFrame_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rsl::LeapFrame_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rsl::LeapFrame_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "currentFrameRate: ";
    Printer<double>::stream(s, indent + "  ", v.currentFrameRate);
    s << indent << "ID: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.ID);
    s << indent << "r[]" << std::endl;
    for (size_t i = 0; i < v.r.size(); ++i)
    {
      s << indent << "  r[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "    ", v.r[i]);
    }
    s << indent << "s: ";
    Printer<double>::stream(s, indent + "  ", v.s);
    s << indent << "t: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.t);
    s << indent << "timestamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.timestamp);
    s << indent << "gestures[]" << std::endl;
    for (size_t i = 0; i < v.gestures.size(); ++i)
    {
      s << indent << "  gestures[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::rsl::LeapGesture_<ContainerAllocator> >::stream(s, indent + "    ", v.gestures[i]);
    }
    s << indent << "hands[]" << std::endl;
    for (size_t i = 0; i < v.hands.size(); ++i)
    {
      s << indent << "  hands[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::rsl::LeapHand_<ContainerAllocator> >::stream(s, indent + "    ", v.hands[i]);
    }
    s << indent << "pointables[]" << std::endl;
    for (size_t i = 0; i < v.pointables.size(); ++i)
    {
      s << indent << "  pointables[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::rsl::LeapPointable_<ContainerAllocator> >::stream(s, indent + "    ", v.pointables[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // RSL_MESSAGE_LEAPFRAME_H
