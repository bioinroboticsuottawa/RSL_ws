# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from leap_client/HandInfoList.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import leap_client.msg
import std_msgs.msg

class HandInfoList(genpy.Message):
  _md5sum = "b4ef32c1e3c41baa6a08353a13192a72"
  _type = "leap_client/HandInfoList"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header
HandInfo[] hands

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: leap_client/HandInfo
std_msgs/Header header
int32 id
float32 time_visible
geometry_msgs/Pose pose
geometry_msgs/Vector3 velocity
float32 sphere_radius
geometry_msgs/Point sphere_center
geometry_msgs/Pose stabilized_pose
FingerInfo[] fingers

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: leap_client/FingerInfo
std_msgs/Header header
int32 hand_id
int32 id
float32 time_visible
geometry_msgs/Point tip_position
geometry_msgs/Vector3 tip_velocity
geometry_msgs/Vector3 pointing_direction
geometry_msgs/Point stabilized_tip_position
"""
  __slots__ = ['header','hands']
  _slot_types = ['std_msgs/Header','leap_client/HandInfo[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,hands

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(HandInfoList, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.hands is None:
        self.hands = []
    else:
      self.header = std_msgs.msg.Header()
      self.hands = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.hands)
      buff.write(_struct_I.pack(length))
      for val1 in self.hands:
        _v1 = val1.header
        buff.write(_struct_I.pack(_v1.seq))
        _v2 = _v1.stamp
        _x = _v2
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_if.pack(_x.id, _x.time_visible))
        _v3 = val1.pose
        _v4 = _v3.position
        _x = _v4
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v5 = _v3.orientation
        _x = _v5
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        _v6 = val1.velocity
        _x = _v6
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_f.pack(val1.sphere_radius))
        _v7 = val1.sphere_center
        _x = _v7
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v8 = val1.stabilized_pose
        _v9 = _v8.position
        _x = _v9
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v10 = _v8.orientation
        _x = _v10
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.fingers)
        buff.write(_struct_I.pack(length))
        for val2 in val1.fingers:
          _v11 = val2.header
          buff.write(_struct_I.pack(_v11.seq))
          _v12 = _v11.stamp
          _x = _v12
          buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
          _x = _v11.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2
          buff.write(_struct_2if.pack(_x.hand_id, _x.id, _x.time_visible))
          _v13 = val2.tip_position
          _x = _v13
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v14 = val2.tip_velocity
          _x = _v14
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v15 = val2.pointing_direction
          _x = _v15
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v16 = val2.stabilized_tip_position
          _x = _v16
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.hands is None:
        self.hands = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.hands = []
      for i in range(0, length):
        val1 = leap_client.msg.HandInfo()
        _v17 = val1.header
        start = end
        end += 4
        (_v17.seq,) = _struct_I.unpack(str[start:end])
        _v18 = _v17.stamp
        _x = _v18
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v17.frame_id = str[start:end].decode('utf-8')
        else:
          _v17.frame_id = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.id, _x.time_visible,) = _struct_if.unpack(str[start:end])
        _v19 = val1.pose
        _v20 = _v19.position
        _x = _v20
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v21 = _v19.orientation
        _x = _v21
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        _v22 = val1.velocity
        _x = _v22
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 4
        (val1.sphere_radius,) = _struct_f.unpack(str[start:end])
        _v23 = val1.sphere_center
        _x = _v23
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v24 = val1.stabilized_pose
        _v25 = _v24.position
        _x = _v25
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v26 = _v24.orientation
        _x = _v26
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.fingers = []
        for i in range(0, length):
          val2 = leap_client.msg.FingerInfo()
          _v27 = val2.header
          start = end
          end += 4
          (_v27.seq,) = _struct_I.unpack(str[start:end])
          _v28 = _v27.stamp
          _x = _v28
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v27.frame_id = str[start:end].decode('utf-8')
          else:
            _v27.frame_id = str[start:end]
          _x = val2
          start = end
          end += 12
          (_x.hand_id, _x.id, _x.time_visible,) = _struct_2if.unpack(str[start:end])
          _v29 = val2.tip_position
          _x = _v29
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v30 = val2.tip_velocity
          _x = _v30
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v31 = val2.pointing_direction
          _x = _v31
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v32 = val2.stabilized_tip_position
          _x = _v32
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          val1.fingers.append(val2)
        self.hands.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.hands)
      buff.write(_struct_I.pack(length))
      for val1 in self.hands:
        _v33 = val1.header
        buff.write(_struct_I.pack(_v33.seq))
        _v34 = _v33.stamp
        _x = _v34
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v33.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_if.pack(_x.id, _x.time_visible))
        _v35 = val1.pose
        _v36 = _v35.position
        _x = _v36
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v37 = _v35.orientation
        _x = _v37
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        _v38 = val1.velocity
        _x = _v38
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_f.pack(val1.sphere_radius))
        _v39 = val1.sphere_center
        _x = _v39
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v40 = val1.stabilized_pose
        _v41 = _v40.position
        _x = _v41
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v42 = _v40.orientation
        _x = _v42
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.fingers)
        buff.write(_struct_I.pack(length))
        for val2 in val1.fingers:
          _v43 = val2.header
          buff.write(_struct_I.pack(_v43.seq))
          _v44 = _v43.stamp
          _x = _v44
          buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
          _x = _v43.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2
          buff.write(_struct_2if.pack(_x.hand_id, _x.id, _x.time_visible))
          _v45 = val2.tip_position
          _x = _v45
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v46 = val2.tip_velocity
          _x = _v46
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v47 = val2.pointing_direction
          _x = _v47
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v48 = val2.stabilized_tip_position
          _x = _v48
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.hands is None:
        self.hands = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.hands = []
      for i in range(0, length):
        val1 = leap_client.msg.HandInfo()
        _v49 = val1.header
        start = end
        end += 4
        (_v49.seq,) = _struct_I.unpack(str[start:end])
        _v50 = _v49.stamp
        _x = _v50
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v49.frame_id = str[start:end].decode('utf-8')
        else:
          _v49.frame_id = str[start:end]
        _x = val1
        start = end
        end += 8
        (_x.id, _x.time_visible,) = _struct_if.unpack(str[start:end])
        _v51 = val1.pose
        _v52 = _v51.position
        _x = _v52
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v53 = _v51.orientation
        _x = _v53
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        _v54 = val1.velocity
        _x = _v54
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 4
        (val1.sphere_radius,) = _struct_f.unpack(str[start:end])
        _v55 = val1.sphere_center
        _x = _v55
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v56 = val1.stabilized_pose
        _v57 = _v56.position
        _x = _v57
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v58 = _v56.orientation
        _x = _v58
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.fingers = []
        for i in range(0, length):
          val2 = leap_client.msg.FingerInfo()
          _v59 = val2.header
          start = end
          end += 4
          (_v59.seq,) = _struct_I.unpack(str[start:end])
          _v60 = _v59.stamp
          _x = _v60
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v59.frame_id = str[start:end].decode('utf-8')
          else:
            _v59.frame_id = str[start:end]
          _x = val2
          start = end
          end += 12
          (_x.hand_id, _x.id, _x.time_visible,) = _struct_2if.unpack(str[start:end])
          _v61 = val2.tip_position
          _x = _v61
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v62 = val2.tip_velocity
          _x = _v62
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v63 = val2.pointing_direction
          _x = _v63
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v64 = val2.stabilized_tip_position
          _x = _v64
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          val1.fingers.append(val2)
        self.hands.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_f = struct.Struct("<f")
_struct_3I = struct.Struct("<3I")
_struct_2if = struct.Struct("<2if")
_struct_4d = struct.Struct("<4d")
_struct_if = struct.Struct("<if")
_struct_2I = struct.Struct("<2I")
_struct_3d = struct.Struct("<3d")
