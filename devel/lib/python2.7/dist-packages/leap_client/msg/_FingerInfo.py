# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from leap_client/FingerInfo.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class FingerInfo(genpy.Message):
  _md5sum = "c03d82510bf929e1b9514a3af01d675b"
  _type = "leap_client/FingerInfo"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header
int32 hand_id
int32 id
float32 time_visible
geometry_msgs/Point tip_position
geometry_msgs/Vector3 tip_velocity
geometry_msgs/Vector3 pointing_direction
geometry_msgs/Point stabilized_tip_position

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['header','hand_id','id','time_visible','tip_position','tip_velocity','pointing_direction','stabilized_tip_position']
  _slot_types = ['std_msgs/Header','int32','int32','float32','geometry_msgs/Point','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Point']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,hand_id,id,time_visible,tip_position,tip_velocity,pointing_direction,stabilized_tip_position

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FingerInfo, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.hand_id is None:
        self.hand_id = 0
      if self.id is None:
        self.id = 0
      if self.time_visible is None:
        self.time_visible = 0.
      if self.tip_position is None:
        self.tip_position = geometry_msgs.msg.Point()
      if self.tip_velocity is None:
        self.tip_velocity = geometry_msgs.msg.Vector3()
      if self.pointing_direction is None:
        self.pointing_direction = geometry_msgs.msg.Vector3()
      if self.stabilized_tip_position is None:
        self.stabilized_tip_position = geometry_msgs.msg.Point()
    else:
      self.header = std_msgs.msg.Header()
      self.hand_id = 0
      self.id = 0
      self.time_visible = 0.
      self.tip_position = geometry_msgs.msg.Point()
      self.tip_velocity = geometry_msgs.msg.Vector3()
      self.pointing_direction = geometry_msgs.msg.Vector3()
      self.stabilized_tip_position = geometry_msgs.msg.Point()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2if12d.pack(_x.hand_id, _x.id, _x.time_visible, _x.tip_position.x, _x.tip_position.y, _x.tip_position.z, _x.tip_velocity.x, _x.tip_velocity.y, _x.tip_velocity.z, _x.pointing_direction.x, _x.pointing_direction.y, _x.pointing_direction.z, _x.stabilized_tip_position.x, _x.stabilized_tip_position.y, _x.stabilized_tip_position.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.tip_position is None:
        self.tip_position = geometry_msgs.msg.Point()
      if self.tip_velocity is None:
        self.tip_velocity = geometry_msgs.msg.Vector3()
      if self.pointing_direction is None:
        self.pointing_direction = geometry_msgs.msg.Vector3()
      if self.stabilized_tip_position is None:
        self.stabilized_tip_position = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 108
      (_x.hand_id, _x.id, _x.time_visible, _x.tip_position.x, _x.tip_position.y, _x.tip_position.z, _x.tip_velocity.x, _x.tip_velocity.y, _x.tip_velocity.z, _x.pointing_direction.x, _x.pointing_direction.y, _x.pointing_direction.z, _x.stabilized_tip_position.x, _x.stabilized_tip_position.y, _x.stabilized_tip_position.z,) = _struct_2if12d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2if12d.pack(_x.hand_id, _x.id, _x.time_visible, _x.tip_position.x, _x.tip_position.y, _x.tip_position.z, _x.tip_velocity.x, _x.tip_velocity.y, _x.tip_velocity.z, _x.pointing_direction.x, _x.pointing_direction.y, _x.pointing_direction.z, _x.stabilized_tip_position.x, _x.stabilized_tip_position.y, _x.stabilized_tip_position.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.tip_position is None:
        self.tip_position = geometry_msgs.msg.Point()
      if self.tip_velocity is None:
        self.tip_velocity = geometry_msgs.msg.Vector3()
      if self.pointing_direction is None:
        self.pointing_direction = geometry_msgs.msg.Vector3()
      if self.stabilized_tip_position is None:
        self.stabilized_tip_position = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 108
      (_x.hand_id, _x.id, _x.time_visible, _x.tip_position.x, _x.tip_position.y, _x.tip_position.z, _x.tip_velocity.x, _x.tip_velocity.y, _x.tip_velocity.z, _x.pointing_direction.x, _x.pointing_direction.y, _x.pointing_direction.z, _x.stabilized_tip_position.x, _x.stabilized_tip_position.y, _x.stabilized_tip_position.z,) = _struct_2if12d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_2if12d = struct.Struct("<2if12d")
