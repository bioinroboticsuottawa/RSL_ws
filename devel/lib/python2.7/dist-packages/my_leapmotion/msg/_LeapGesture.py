# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from my_leapmotion/LeapGesture.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class LeapGesture(genpy.Message):
  _md5sum = "967e671f82992095ab401d46b1c41311"
  _type = "my_leapmotion/LeapGesture"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Leap Motion v6 Gesture JSON-based submessage
# https://developer.leapmotion.com/documentation/v2/javascript/supplements/Leap_JSON.html#version-6
#
#
geometry_msgs/Point center          # array of floats (vector) -- circle only
geometry_msgs/Vector3 direction     # array of floats (vector) -- swipe, keyTap, screenTap only
uint32 duration                     # integer microseconds
uint32[] handIds                    # array of integers
uint32 ID                           # integer
geometry_msgs/Vector3 normal        # array of floats -- circle only
uint32[] pointableIds               # array
geometry_msgs/Point position        # array of floats (vector) -- swipe, keyTap, screenTap only
float64 progress                    # float -- circle, keyTap, screenTap only
float64 radius                      # float -- circle only
float64 speed                       # float -- swipe only
geometry_msgs/Point startPosition   # array of float (vector) -- swipe only
string state                        # string - one of "start", "update", "stop"
string gestureType                  # string - one of "circle", "swipe", "keyTap", "screenTap"

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['center','direction','duration','handIds','ID','normal','pointableIds','position','progress','radius','speed','startPosition','state','gestureType']
  _slot_types = ['geometry_msgs/Point','geometry_msgs/Vector3','uint32','uint32[]','uint32','geometry_msgs/Vector3','uint32[]','geometry_msgs/Point','float64','float64','float64','geometry_msgs/Point','string','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       center,direction,duration,handIds,ID,normal,pointableIds,position,progress,radius,speed,startPosition,state,gestureType

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LeapGesture, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.center is None:
        self.center = geometry_msgs.msg.Point()
      if self.direction is None:
        self.direction = geometry_msgs.msg.Vector3()
      if self.duration is None:
        self.duration = 0
      if self.handIds is None:
        self.handIds = []
      if self.ID is None:
        self.ID = 0
      if self.normal is None:
        self.normal = geometry_msgs.msg.Vector3()
      if self.pointableIds is None:
        self.pointableIds = []
      if self.position is None:
        self.position = geometry_msgs.msg.Point()
      if self.progress is None:
        self.progress = 0.
      if self.radius is None:
        self.radius = 0.
      if self.speed is None:
        self.speed = 0.
      if self.startPosition is None:
        self.startPosition = geometry_msgs.msg.Point()
      if self.state is None:
        self.state = ''
      if self.gestureType is None:
        self.gestureType = ''
    else:
      self.center = geometry_msgs.msg.Point()
      self.direction = geometry_msgs.msg.Vector3()
      self.duration = 0
      self.handIds = []
      self.ID = 0
      self.normal = geometry_msgs.msg.Vector3()
      self.pointableIds = []
      self.position = geometry_msgs.msg.Point()
      self.progress = 0.
      self.radius = 0.
      self.speed = 0.
      self.startPosition = geometry_msgs.msg.Point()
      self.state = ''
      self.gestureType = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_6dI.pack(_x.center.x, _x.center.y, _x.center.z, _x.direction.x, _x.direction.y, _x.direction.z, _x.duration))
      length = len(self.handIds)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.pack(pattern, *self.handIds))
      _x = self
      buff.write(_struct_I3d.pack(_x.ID, _x.normal.x, _x.normal.y, _x.normal.z))
      length = len(self.pointableIds)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.pack(pattern, *self.pointableIds))
      _x = self
      buff.write(_struct_9d.pack(_x.position.x, _x.position.y, _x.position.z, _x.progress, _x.radius, _x.speed, _x.startPosition.x, _x.startPosition.y, _x.startPosition.z))
      _x = self.state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.gestureType
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.center is None:
        self.center = geometry_msgs.msg.Point()
      if self.direction is None:
        self.direction = geometry_msgs.msg.Vector3()
      if self.normal is None:
        self.normal = geometry_msgs.msg.Vector3()
      if self.position is None:
        self.position = geometry_msgs.msg.Point()
      if self.startPosition is None:
        self.startPosition = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 52
      (_x.center.x, _x.center.y, _x.center.z, _x.direction.x, _x.direction.y, _x.direction.z, _x.duration,) = _struct_6dI.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      end += struct.calcsize(pattern)
      self.handIds = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 28
      (_x.ID, _x.normal.x, _x.normal.y, _x.normal.z,) = _struct_I3d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      end += struct.calcsize(pattern)
      self.pointableIds = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 72
      (_x.position.x, _x.position.y, _x.position.z, _x.progress, _x.radius, _x.speed, _x.startPosition.x, _x.startPosition.y, _x.startPosition.z,) = _struct_9d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state = str[start:end].decode('utf-8')
      else:
        self.state = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.gestureType = str[start:end].decode('utf-8')
      else:
        self.gestureType = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_6dI.pack(_x.center.x, _x.center.y, _x.center.z, _x.direction.x, _x.direction.y, _x.direction.z, _x.duration))
      length = len(self.handIds)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.handIds.tostring())
      _x = self
      buff.write(_struct_I3d.pack(_x.ID, _x.normal.x, _x.normal.y, _x.normal.z))
      length = len(self.pointableIds)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.pointableIds.tostring())
      _x = self
      buff.write(_struct_9d.pack(_x.position.x, _x.position.y, _x.position.z, _x.progress, _x.radius, _x.speed, _x.startPosition.x, _x.startPosition.y, _x.startPosition.z))
      _x = self.state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.gestureType
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.center is None:
        self.center = geometry_msgs.msg.Point()
      if self.direction is None:
        self.direction = geometry_msgs.msg.Vector3()
      if self.normal is None:
        self.normal = geometry_msgs.msg.Vector3()
      if self.position is None:
        self.position = geometry_msgs.msg.Point()
      if self.startPosition is None:
        self.startPosition = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 52
      (_x.center.x, _x.center.y, _x.center.z, _x.direction.x, _x.direction.y, _x.direction.z, _x.duration,) = _struct_6dI.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      end += struct.calcsize(pattern)
      self.handIds = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      _x = self
      start = end
      end += 28
      (_x.ID, _x.normal.x, _x.normal.y, _x.normal.z,) = _struct_I3d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      end += struct.calcsize(pattern)
      self.pointableIds = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      _x = self
      start = end
      end += 72
      (_x.position.x, _x.position.y, _x.position.z, _x.progress, _x.radius, _x.speed, _x.startPosition.x, _x.startPosition.y, _x.startPosition.z,) = _struct_9d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state = str[start:end].decode('utf-8')
      else:
        self.state = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.gestureType = str[start:end].decode('utf-8')
      else:
        self.gestureType = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_6dI = struct.Struct("<6dI")
_struct_9d = struct.Struct("<9d")
_struct_I3d = struct.Struct("<I3d")
