# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from my_leapmotion/LeapFrame.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import genpy
import my_leapmotion.msg
import std_msgs.msg

class LeapFrame(genpy.Message):
  _md5sum = "1be96930b5a5f7da0ae5f4ae85fd4442"
  _type = "my_leapmotion/LeapFrame"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# Leap Motion v6 Frame JSON-based message
# https://developer.leapmotion.com/documentation/v2/javascript/supplements/Leap_JSON.html#version-6
#
#
Header header
float64 currentFrameRate
uint32 ID                       # Leap Motion documents this as a float, but that's not right
geometry_msgs/Vector3[] r      # Leap Motion documentation as Matrix (ambigous)
float64 s
geometry_msgs/Vector3 t
time timestamp
LeapGesture[] gestures
LeapHand[] hands
# interaction box not included
LeapPointable[] pointables

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: my_leapmotion/LeapGesture
# Leap Motion v6 Gesture JSON-based submessage
# https://developer.leapmotion.com/documentation/v2/javascript/supplements/Leap_JSON.html#version-6
#
#
geometry_msgs/Point center          # array of floats (vector) -- circle only
geometry_msgs/Vector3 direction     # array of floats (vector) -- swipe, keyTap, screenTap only
uint32 duration                     # integer microseconds
uint32[] handIds                    # array of integers
uint32 ID                           # integer
geometry_msgs/Vector3 normal        # array of floats -- circle only
uint32[] pointableIds               # array
geometry_msgs/Point position        # array of floats (vector) -- swipe, keyTap, screenTap only
float64 progress                    # float -- circle, keyTap, screenTap only
float64 radius                      # float -- circle only
float64 speed                       # float -- swipe only
geometry_msgs/Point startPosition   # array of float (vector) -- swipe only
string state                        # string - one of "start", "update", "stop"
string gestureType                  # string - one of "circle", "swipe", "keyTap", "screenTap"

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: my_leapmotion/LeapHand
# Leap Motion v6 Hand JSON-based submessage
# https://developer.leapmotion.com/documentation/v2/javascript/supplements/Leap_JSON.html#version-6
#
#
geometry_msgs/Vector3[3] armBasis           # the 3 basis vectors of the arm (array of vectors)
float64 armWidth
float64 confidence
geometry_msgs/Vector3 direction             # array of floats (vector)
geometry_msgs/Point elbow
float64 grabStrength
uint32 ID
geometry_msgs/Vector3 palmNormal
geometry_msgs/Point palmPosition
geometry_msgs/Vector3 palmVelocity
float64 pinchStrength
geometry_msgs/Vector3[3] r                  # Leap Motion documentation as Matrix (ambigous)
float64 s
geometry_msgs/Point sphereCenter
float64 sphereRadius
geometry_msgs/Point stabilizedPalmPosition
geometry_msgs/Vector3 t
float64 timeVisible
string handType                                 # string - one of "right", "left"
geometry_msgs/Point wrist

================================================================================
MSG: my_leapmotion/LeapPointable
# Leap Motion v6 Pointable JSON-based submessage
# https://developer.leapmotion.com/documentation/v2/javascript/supplements/Leap_JSON.html#version-6
#
#

# Leap uses a two dimensional array for the bases but ROS messages only support one dimension
# Unroll the Leap bases into individual bone basis instead
# geometry_msgs/Vector3[3][] bases          # the 3 basis vectors for each bone, in index order, wrist to tip, metacarpal, proximal, intermediate, and distal.
geometry_msgs/Vector3[3] metacarpalBasis
geometry_msgs/Vector3[3] proximalBasis
geometry_msgs/Vector3[3] intermediateBasis
geometry_msgs/Vector3[3] distalBasis
geometry_msgs/Point btipPosition            # the position of the tip of the distal phalanx as an array of 3 floats.
geometry_msgs/Point carpPosition            # the position of the base of metacarpal bone as an array of 3 floats.
geometry_msgs/Point dipPosition             # the position of the base of the distal phalanx as an array of 3 floats.
geometry_msgs/Vector3 direction
bool extended
uint32 handId
uint32 ID
float64 length
geometry_msgs/Point mcpPosition             # a position vector as an array of 3 floating point numbers
geometry_msgs/Point pipPosition             # a position vector as an array of 3 floating point numbers
geometry_msgs/Point stabilizedTipPosition   # array of floats (vector)
float64 timeVisible
geometry_msgs/Point tipPosition             #  array of floats (vector)
geometry_msgs/Vector3 tipVelocity           #  array of floats (vector)
bool tool
float64 touchDistance
string touchZone                            # string - one of "none", "hovering", "touching"
uint32 pointableType                        # integer - 0 is thumb; 4 is pinky
float64 width
"""
  __slots__ = ['header','currentFrameRate','ID','r','s','t','timestamp','gestures','hands','pointables']
  _slot_types = ['std_msgs/Header','float64','uint32','geometry_msgs/Vector3[]','float64','geometry_msgs/Vector3','time','my_leapmotion/LeapGesture[]','my_leapmotion/LeapHand[]','my_leapmotion/LeapPointable[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,currentFrameRate,ID,r,s,t,timestamp,gestures,hands,pointables

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LeapFrame, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.currentFrameRate is None:
        self.currentFrameRate = 0.
      if self.ID is None:
        self.ID = 0
      if self.r is None:
        self.r = []
      if self.s is None:
        self.s = 0.
      if self.t is None:
        self.t = geometry_msgs.msg.Vector3()
      if self.timestamp is None:
        self.timestamp = genpy.Time()
      if self.gestures is None:
        self.gestures = []
      if self.hands is None:
        self.hands = []
      if self.pointables is None:
        self.pointables = []
    else:
      self.header = std_msgs.msg.Header()
      self.currentFrameRate = 0.
      self.ID = 0
      self.r = []
      self.s = 0.
      self.t = geometry_msgs.msg.Vector3()
      self.timestamp = genpy.Time()
      self.gestures = []
      self.hands = []
      self.pointables = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_dI.pack(_x.currentFrameRate, _x.ID))
      length = len(self.r)
      buff.write(_struct_I.pack(length))
      for val1 in self.r:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_struct_4d2I.pack(_x.s, _x.t.x, _x.t.y, _x.t.z, _x.timestamp.secs, _x.timestamp.nsecs))
      length = len(self.gestures)
      buff.write(_struct_I.pack(length))
      for val1 in self.gestures:
        _v1 = val1.center
        _x = _v1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v2 = val1.direction
        _x = _v2
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_I.pack(val1.duration))
        length = len(val1.handIds)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(struct.pack(pattern, *val1.handIds))
        buff.write(_struct_I.pack(val1.ID))
        _v3 = val1.normal
        _x = _v3
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        length = len(val1.pointableIds)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(struct.pack(pattern, *val1.pointableIds))
        _v4 = val1.position
        _x = _v4
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_struct_3d.pack(_x.progress, _x.radius, _x.speed))
        _v5 = val1.startPosition
        _x = _v5
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = val1.state
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.gestureType
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.hands)
      buff.write(_struct_I.pack(length))
      for val1 in self.hands:
        for val2 in val1.armBasis:
          _x = val2
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_struct_2d.pack(_x.armWidth, _x.confidence))
        _v6 = val1.direction
        _x = _v6
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v7 = val1.elbow
        _x = _v7
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_struct_dI.pack(_x.grabStrength, _x.ID))
        _v8 = val1.palmNormal
        _x = _v8
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v9 = val1.palmPosition
        _x = _v9
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v10 = val1.palmVelocity
        _x = _v10
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_d.pack(val1.pinchStrength))
        for val2 in val1.r:
          _x = val2
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_d.pack(val1.s))
        _v11 = val1.sphereCenter
        _x = _v11
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_d.pack(val1.sphereRadius))
        _v12 = val1.stabilizedPalmPosition
        _x = _v12
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v13 = val1.t
        _x = _v13
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_d.pack(val1.timeVisible))
        _x = val1.handType
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v14 = val1.wrist
        _x = _v14
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      length = len(self.pointables)
      buff.write(_struct_I.pack(length))
      for val1 in self.pointables:
        for val2 in val1.metacarpalBasis:
          _x = val2
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        for val2 in val1.proximalBasis:
          _x = val2
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        for val2 in val1.intermediateBasis:
          _x = val2
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        for val2 in val1.distalBasis:
          _x = val2
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v15 = val1.btipPosition
        _x = _v15
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v16 = val1.carpPosition
        _x = _v16
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v17 = val1.dipPosition
        _x = _v17
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v18 = val1.direction
        _x = _v18
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_struct_B2Id.pack(_x.extended, _x.handId, _x.ID, _x.length))
        _v19 = val1.mcpPosition
        _x = _v19
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v20 = val1.pipPosition
        _x = _v20
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v21 = val1.stabilizedTipPosition
        _x = _v21
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_d.pack(val1.timeVisible))
        _v22 = val1.tipPosition
        _x = _v22
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v23 = val1.tipVelocity
        _x = _v23
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_struct_Bd.pack(_x.tool, _x.touchDistance))
        _x = val1.touchZone
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_Id.pack(_x.pointableType, _x.width))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.r is None:
        self.r = None
      if self.t is None:
        self.t = geometry_msgs.msg.Vector3()
      if self.timestamp is None:
        self.timestamp = genpy.Time()
      if self.gestures is None:
        self.gestures = None
      if self.hands is None:
        self.hands = None
      if self.pointables is None:
        self.pointables = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.currentFrameRate, _x.ID,) = _struct_dI.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.r = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.r.append(val1)
      _x = self
      start = end
      end += 40
      (_x.s, _x.t.x, _x.t.y, _x.t.z, _x.timestamp.secs, _x.timestamp.nsecs,) = _struct_4d2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.gestures = []
      for i in range(0, length):
        val1 = my_leapmotion.msg.LeapGesture()
        _v24 = val1.center
        _x = _v24
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v25 = val1.direction
        _x = _v25
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 4
        (val1.duration,) = _struct_I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        end += struct.calcsize(pattern)
        val1.handIds = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (val1.ID,) = _struct_I.unpack(str[start:end])
        _v26 = val1.normal
        _x = _v26
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        end += struct.calcsize(pattern)
        val1.pointableIds = struct.unpack(pattern, str[start:end])
        _v27 = val1.position
        _x = _v27
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = val1
        start = end
        end += 24
        (_x.progress, _x.radius, _x.speed,) = _struct_3d.unpack(str[start:end])
        _v28 = val1.startPosition
        _x = _v28
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.state = str[start:end].decode('utf-8')
        else:
          val1.state = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.gestureType = str[start:end].decode('utf-8')
        else:
          val1.gestureType = str[start:end]
        self.gestures.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.hands = []
      for i in range(0, length):
        val1 = my_leapmotion.msg.LeapHand()
        val1.armBasis = []
        for i in range(0, 3):
          val2 = geometry_msgs.msg.Vector3()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          val1.armBasis.append(val2)
        _x = val1
        start = end
        end += 16
        (_x.armWidth, _x.confidence,) = _struct_2d.unpack(str[start:end])
        _v29 = val1.direction
        _x = _v29
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v30 = val1.elbow
        _x = _v30
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = val1
        start = end
        end += 12
        (_x.grabStrength, _x.ID,) = _struct_dI.unpack(str[start:end])
        _v31 = val1.palmNormal
        _x = _v31
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v32 = val1.palmPosition
        _x = _v32
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v33 = val1.palmVelocity
        _x = _v33
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 8
        (val1.pinchStrength,) = _struct_d.unpack(str[start:end])
        val1.r = []
        for i in range(0, 3):
          val2 = geometry_msgs.msg.Vector3()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          val1.r.append(val2)
        start = end
        end += 8
        (val1.s,) = _struct_d.unpack(str[start:end])
        _v34 = val1.sphereCenter
        _x = _v34
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 8
        (val1.sphereRadius,) = _struct_d.unpack(str[start:end])
        _v35 = val1.stabilizedPalmPosition
        _x = _v35
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v36 = val1.t
        _x = _v36
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 8
        (val1.timeVisible,) = _struct_d.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.handType = str[start:end].decode('utf-8')
        else:
          val1.handType = str[start:end]
        _v37 = val1.wrist
        _x = _v37
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.hands.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pointables = []
      for i in range(0, length):
        val1 = my_leapmotion.msg.LeapPointable()
        val1.metacarpalBasis = []
        for i in range(0, 3):
          val2 = geometry_msgs.msg.Vector3()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          val1.metacarpalBasis.append(val2)
        val1.proximalBasis = []
        for i in range(0, 3):
          val2 = geometry_msgs.msg.Vector3()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          val1.proximalBasis.append(val2)
        val1.intermediateBasis = []
        for i in range(0, 3):
          val2 = geometry_msgs.msg.Vector3()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          val1.intermediateBasis.append(val2)
        val1.distalBasis = []
        for i in range(0, 3):
          val2 = geometry_msgs.msg.Vector3()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          val1.distalBasis.append(val2)
        _v38 = val1.btipPosition
        _x = _v38
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v39 = val1.carpPosition
        _x = _v39
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v40 = val1.dipPosition
        _x = _v40
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v41 = val1.direction
        _x = _v41
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = val1
        start = end
        end += 17
        (_x.extended, _x.handId, _x.ID, _x.length,) = _struct_B2Id.unpack(str[start:end])
        val1.extended = bool(val1.extended)
        _v42 = val1.mcpPosition
        _x = _v42
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v43 = val1.pipPosition
        _x = _v43
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v44 = val1.stabilizedTipPosition
        _x = _v44
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 8
        (val1.timeVisible,) = _struct_d.unpack(str[start:end])
        _v45 = val1.tipPosition
        _x = _v45
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v46 = val1.tipVelocity
        _x = _v46
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = val1
        start = end
        end += 9
        (_x.tool, _x.touchDistance,) = _struct_Bd.unpack(str[start:end])
        val1.tool = bool(val1.tool)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.touchZone = str[start:end].decode('utf-8')
        else:
          val1.touchZone = str[start:end]
        _x = val1
        start = end
        end += 12
        (_x.pointableType, _x.width,) = _struct_Id.unpack(str[start:end])
        self.pointables.append(val1)
      self.timestamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_dI.pack(_x.currentFrameRate, _x.ID))
      length = len(self.r)
      buff.write(_struct_I.pack(length))
      for val1 in self.r:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_struct_4d2I.pack(_x.s, _x.t.x, _x.t.y, _x.t.z, _x.timestamp.secs, _x.timestamp.nsecs))
      length = len(self.gestures)
      buff.write(_struct_I.pack(length))
      for val1 in self.gestures:
        _v47 = val1.center
        _x = _v47
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v48 = val1.direction
        _x = _v48
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_I.pack(val1.duration))
        length = len(val1.handIds)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(val1.handIds.tostring())
        buff.write(_struct_I.pack(val1.ID))
        _v49 = val1.normal
        _x = _v49
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        length = len(val1.pointableIds)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(val1.pointableIds.tostring())
        _v50 = val1.position
        _x = _v50
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_struct_3d.pack(_x.progress, _x.radius, _x.speed))
        _v51 = val1.startPosition
        _x = _v51
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = val1.state
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.gestureType
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.hands)
      buff.write(_struct_I.pack(length))
      for val1 in self.hands:
        for val2 in val1.armBasis:
          _x = val2
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_struct_2d.pack(_x.armWidth, _x.confidence))
        _v52 = val1.direction
        _x = _v52
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v53 = val1.elbow
        _x = _v53
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_struct_dI.pack(_x.grabStrength, _x.ID))
        _v54 = val1.palmNormal
        _x = _v54
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v55 = val1.palmPosition
        _x = _v55
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v56 = val1.palmVelocity
        _x = _v56
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_d.pack(val1.pinchStrength))
        for val2 in val1.r:
          _x = val2
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_d.pack(val1.s))
        _v57 = val1.sphereCenter
        _x = _v57
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_d.pack(val1.sphereRadius))
        _v58 = val1.stabilizedPalmPosition
        _x = _v58
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v59 = val1.t
        _x = _v59
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_d.pack(val1.timeVisible))
        _x = val1.handType
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v60 = val1.wrist
        _x = _v60
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      length = len(self.pointables)
      buff.write(_struct_I.pack(length))
      for val1 in self.pointables:
        for val2 in val1.metacarpalBasis:
          _x = val2
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        for val2 in val1.proximalBasis:
          _x = val2
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        for val2 in val1.intermediateBasis:
          _x = val2
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        for val2 in val1.distalBasis:
          _x = val2
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v61 = val1.btipPosition
        _x = _v61
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v62 = val1.carpPosition
        _x = _v62
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v63 = val1.dipPosition
        _x = _v63
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v64 = val1.direction
        _x = _v64
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_struct_B2Id.pack(_x.extended, _x.handId, _x.ID, _x.length))
        _v65 = val1.mcpPosition
        _x = _v65
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v66 = val1.pipPosition
        _x = _v66
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v67 = val1.stabilizedTipPosition
        _x = _v67
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_d.pack(val1.timeVisible))
        _v68 = val1.tipPosition
        _x = _v68
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v69 = val1.tipVelocity
        _x = _v69
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_struct_Bd.pack(_x.tool, _x.touchDistance))
        _x = val1.touchZone
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_Id.pack(_x.pointableType, _x.width))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.r is None:
        self.r = None
      if self.t is None:
        self.t = geometry_msgs.msg.Vector3()
      if self.timestamp is None:
        self.timestamp = genpy.Time()
      if self.gestures is None:
        self.gestures = None
      if self.hands is None:
        self.hands = None
      if self.pointables is None:
        self.pointables = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.currentFrameRate, _x.ID,) = _struct_dI.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.r = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.r.append(val1)
      _x = self
      start = end
      end += 40
      (_x.s, _x.t.x, _x.t.y, _x.t.z, _x.timestamp.secs, _x.timestamp.nsecs,) = _struct_4d2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.gestures = []
      for i in range(0, length):
        val1 = my_leapmotion.msg.LeapGesture()
        _v70 = val1.center
        _x = _v70
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v71 = val1.direction
        _x = _v71
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 4
        (val1.duration,) = _struct_I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        end += struct.calcsize(pattern)
        val1.handIds = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
        start = end
        end += 4
        (val1.ID,) = _struct_I.unpack(str[start:end])
        _v72 = val1.normal
        _x = _v72
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        end += struct.calcsize(pattern)
        val1.pointableIds = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
        _v73 = val1.position
        _x = _v73
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = val1
        start = end
        end += 24
        (_x.progress, _x.radius, _x.speed,) = _struct_3d.unpack(str[start:end])
        _v74 = val1.startPosition
        _x = _v74
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.state = str[start:end].decode('utf-8')
        else:
          val1.state = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.gestureType = str[start:end].decode('utf-8')
        else:
          val1.gestureType = str[start:end]
        self.gestures.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.hands = []
      for i in range(0, length):
        val1 = my_leapmotion.msg.LeapHand()
        val1.armBasis = []
        for i in range(0, 3):
          val2 = geometry_msgs.msg.Vector3()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          val1.armBasis.append(val2)
        _x = val1
        start = end
        end += 16
        (_x.armWidth, _x.confidence,) = _struct_2d.unpack(str[start:end])
        _v75 = val1.direction
        _x = _v75
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v76 = val1.elbow
        _x = _v76
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = val1
        start = end
        end += 12
        (_x.grabStrength, _x.ID,) = _struct_dI.unpack(str[start:end])
        _v77 = val1.palmNormal
        _x = _v77
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v78 = val1.palmPosition
        _x = _v78
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v79 = val1.palmVelocity
        _x = _v79
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 8
        (val1.pinchStrength,) = _struct_d.unpack(str[start:end])
        val1.r = []
        for i in range(0, 3):
          val2 = geometry_msgs.msg.Vector3()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          val1.r.append(val2)
        start = end
        end += 8
        (val1.s,) = _struct_d.unpack(str[start:end])
        _v80 = val1.sphereCenter
        _x = _v80
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 8
        (val1.sphereRadius,) = _struct_d.unpack(str[start:end])
        _v81 = val1.stabilizedPalmPosition
        _x = _v81
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v82 = val1.t
        _x = _v82
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 8
        (val1.timeVisible,) = _struct_d.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.handType = str[start:end].decode('utf-8')
        else:
          val1.handType = str[start:end]
        _v83 = val1.wrist
        _x = _v83
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.hands.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pointables = []
      for i in range(0, length):
        val1 = my_leapmotion.msg.LeapPointable()
        val1.metacarpalBasis = []
        for i in range(0, 3):
          val2 = geometry_msgs.msg.Vector3()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          val1.metacarpalBasis.append(val2)
        val1.proximalBasis = []
        for i in range(0, 3):
          val2 = geometry_msgs.msg.Vector3()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          val1.proximalBasis.append(val2)
        val1.intermediateBasis = []
        for i in range(0, 3):
          val2 = geometry_msgs.msg.Vector3()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          val1.intermediateBasis.append(val2)
        val1.distalBasis = []
        for i in range(0, 3):
          val2 = geometry_msgs.msg.Vector3()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          val1.distalBasis.append(val2)
        _v84 = val1.btipPosition
        _x = _v84
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v85 = val1.carpPosition
        _x = _v85
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v86 = val1.dipPosition
        _x = _v86
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v87 = val1.direction
        _x = _v87
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = val1
        start = end
        end += 17
        (_x.extended, _x.handId, _x.ID, _x.length,) = _struct_B2Id.unpack(str[start:end])
        val1.extended = bool(val1.extended)
        _v88 = val1.mcpPosition
        _x = _v88
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v89 = val1.pipPosition
        _x = _v89
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v90 = val1.stabilizedTipPosition
        _x = _v90
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 8
        (val1.timeVisible,) = _struct_d.unpack(str[start:end])
        _v91 = val1.tipPosition
        _x = _v91
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v92 = val1.tipVelocity
        _x = _v92
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = val1
        start = end
        end += 9
        (_x.tool, _x.touchDistance,) = _struct_Bd.unpack(str[start:end])
        val1.tool = bool(val1.tool)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.touchZone = str[start:end].decode('utf-8')
        else:
          val1.touchZone = str[start:end]
        _x = val1
        start = end
        end += 12
        (_x.pointableType, _x.width,) = _struct_Id.unpack(str[start:end])
        self.pointables.append(val1)
      self.timestamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_Bd = struct.Struct("<Bd")
_struct_4d2I = struct.Struct("<4d2I")
_struct_d = struct.Struct("<d")
_struct_dI = struct.Struct("<dI")
_struct_2d = struct.Struct("<2d")
_struct_3I = struct.Struct("<3I")
_struct_B2Id = struct.Struct("<B2Id")
_struct_Id = struct.Struct("<Id")
_struct_3d = struct.Struct("<3d")
